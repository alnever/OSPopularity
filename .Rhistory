available.packages()
add2 <- function (x,y) {
x + y
}
add2(3,5)
above10 <- function(vect) {
vect > 10
}
above10(c(1,2,3,10,11,4,5,12))
above10 <- function(vect) {
vect[vect > 10]
}
above10(c(1,2,3,10,11,4,5,12))
aboveN <- function(vect, n) {
use <- vect > n
vect[use]
}
aboveN(c(1,2,3,10,11,4,5,12),5)
aboveN <- function(vect, n = 10) {
use <- vect > n
vect[use]
}
x <- 1:20
abloveN(x)
aboveN(x)
aboveN(x,12)
?mean
formals(above10)
search()
args(power)
make.power <- function(n){
pow <- function(x){
x^n
}
pow
}
square <- make.power(2)
class(square)
?square
args(square)
qube <- make.power(3)
equal
?equality
?is.equal
?is.equality
identical(square, qube)
square(3)
qube(3)
qube
square
ls(environment(qube))
ls(environment(qube))["n"]
env3 <- ls(environment(qube))
env3$n
env3
get("n", env3)
get("n", environment(qube))
env3 <- environment(qube)
get("n", env3)
env3
class(env3)
env3$n
y <- 10
g <- function(x)
{
y <- 2
x + y
}
f <- function(x)
{
x + y
}
f(1)
g(1)
f(1)
strsplit("Hello world")
strsplit("Hello world", split="")
fact <- factor(strsplit("Hello world",split=""))
fact <- as.factor(strsplit("Hello world",split=""))
s <- strsplit("Hello world", split="")
class(s)
fact <- as.factor(s)
class(s[1])
class(s[[1]])
fact <- as.factor(s[[1]])
fact
fact[d]
fact["d"]
table(fact)
unlist(fact)
unclass(fact)
v <- as.vector(fact)
v
q()
rm(list = ls())
q()
library(ggplot2)
d <- diamonds
fit <- princomp(d, cor=TRUE)
fit <- princomp(d)
d <- transform(d, cut = as.numeric(unclass(cut)))
d <- transform(d, color = as.numeric(unclass(color)))
d <- transform(d, clarity = as.numeric(unclass(clarity)))
head(d)
fit <- princomp(d)
str(fit)
plot(fit,type="lines")
fit$scores
biplot(fit)
scale(d)
d <- scale(d)
head(d)
s <- svd(d)
str(d)
str(s)
plot(s$d)
dim(d)
a <- s$u[,1:7] %*% diag(s$d[1:7]) %*% t(s$v[,1:7])
dim(a)
dim(s$u[,1:7])
dim(t(s$v[,1:7]))
q()
getwd()
rm(list = ls())
install.packages("pdflatex")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rfModel <- train(y ~ ., method = "rf")
library(caret)
rfModel <- train(y ~ ., method = "rf")
rfModel <- train(y ~ ., method = "rf", data = vowel.train)
gbmModel <- train(y ~ ., method = "gbm", data = vowel.train)
rfModel
gbmModel <- train(y ~ ., method = "gbm", data = vowel.train, verbose = FALSE)
library(caret)
gbmModel <- train(y ~ ., method = "gbm", data = vowel.train, verbose = FALSE)
rfmModel <- train(y ~ ., method = "rf", data = vowel.train)
rfPred <- predict(rfmModel, newdata = vowel.test)
rfPred
confusionMatrix(rfPred, vowel.test$y)
set.seed(33833)
rfmModel <- train(y ~ ., method = "rf", data = vowel.train)
rfPred <- predict(rfmModel, newdata = vowel.test)
confusionMatrix(rfPred, vowel.test$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
rfmodel <- suppressMessages(train(y~., data=vowel.train, method="rf"))
gbmmodel <- suppressMessages(train(y~., data=vowel.train, method="gbm"))
setwd("d:/work/R/09/OS/")
